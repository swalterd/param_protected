ParamProtected
==============

= Summary
This plugin provides two class methods on <tt>ActiveController::Base</tt> that filter the <tt>params</tt> hash for that controller's actions.  You can think of them as the controller analog of <tt>attr_protected</tt> and <tt>attr_accessible</tt>.

= Author
Christopher J. Bottaro

= Usage
 class YourController < ActiveController::Base
   param_protected <param_name> <options>
   param_accessible <param_name> <options>
   
   ...
 end
<tt>param_name</tt> can be a String, Symbol, or Array of Strings and/or Symbols.

<tt>options</tt> is a Hash that has <em>one</em> of two keys:  <tt>:only</tt> or <tt>:except</tt>.  The value for these keys is a String, Symbol, or Array of Strings and/or Symbols which denotes to the action(s) for which params to protect.  You may also use a Proc to return an array of action names as strings.  This Proc will be run in the context of the controller.

= Examples

== Blacklisting
Any of these combinations should work.
 param_protected :client_id
 param_protected [:client_id, :user_id]
 param_protected :client_id, :only => 'my_action'
 param_protected :client_id, :except => [:your_action, :my_action]

== Whitelisting
Any of these combinations should work.
 param_accessible :client_id
 param_accessible :[:client_id, :user_id]
 param_accessible :client_id, :only => 'my_action'
 param_accessible :client_id, :except => [:your_action, :my_action]

== Nested Params
You can use combinations of arrays and hashes to specify nested params, much the same way ActiveRecord::Base#find's
:include argument works.
 param_accessible [:account_name, { :user => [:first_name, :last_name, :address => [:street, :city, :state]] }]
 param_protected [:id, :password, { :user => [:id, :password] }]

== Caveats
Both <tt>param_protected</tt> and <tt>param_accessible</tt> are really just calls to <tt>prepend_before_filter</tt>.  Thus any methods in your filter chain that run before either of these methods will have full access to the <em>unprotected</em> <tt>params</tt> Hash.
